{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\BamApp\\\\src\\\\home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { hardcodedData } from \"./hardcodedData\";\nimport \"./styles.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [drivers, setDrivers] = useState([]);\n  const [newDriver, setNewDriver] = useState(\"\");\n  const [newItem, setNewItem] = useState({\n    date: new Date().toISOString().split(\"T\")[0],\n    brand: \"\",\n    driver: \"\",\n    customer: \"\",\n    routeNumber: \"\",\n    hours: \"\",\n    isTrue: false,\n    vehicleNumber: \"\",\n    price: \"\",\n    colorClass: \"\" // Добавлен colorClass\n  });\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split(\"T\")[0]);\n  const navigate = useNavigate();\n  const currentDayRef = useRef(null);\n\n  // Получение данных с сервера\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/data\");\n        setData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    const fetchDrivers = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/drivers\");\n        setDrivers(response.data);\n      } catch (error) {\n        console.error(\"Error fetching drivers:\", error);\n      }\n    };\n    fetchData();\n    fetchDrivers();\n  }, []);\n\n  // Прокрутка к текущему дню после загрузки данных\n  useEffect(() => {\n    if (currentDayRef.current) {\n      currentDayRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\"\n      });\n    }\n  }, [data]);\n\n  // Функция выхода из системы\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    navigate(\"/login\");\n  };\n\n  // Сортировка данных по водителям и перемещение строк с классом 'highlight' в конец\n  const sortedData = data.sort((a, b) => {\n    if (a.colorClass === 'highlight' && b.colorClass !== 'highlight') return 1;\n    if (a.colorClass !== 'highlight' && b.colorClass === 'highlight') return -1;\n    return a.driver.localeCompare(b.driver);\n  }).sort((a, b) => new Date(a.date) - new Date(b.date));\n\n  // Функция для добавления строк на каждый новый день\n  const addEntriesForSelectedDate = async () => {\n    try {\n      const newEntries = hardcodedData.map(item => ({\n        ...item,\n        date: selectedDate\n      }));\n      await Promise.all(newEntries.map(entry => axios.post(\"http://localhost:5000/api/data\", entry)));\n      const response = await axios.get(\"http://localhost:5000/api/data\");\n      setData(response.data);\n    } catch (error) {\n      console.error(\"Error adding entries:\", error);\n    }\n  };\n\n  // Добавление одной строки данных\n  const addNewItem = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/data\", newItem);\n      setData([...data, response.data]);\n    } catch (error) {\n      console.error(\"Error adding data:\", error);\n    }\n  };\n\n  // Добавление строки с определенным классом\n  const addNewItemWithClass = async className => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/data\", {\n        ...newItem,\n        colorClass: className // Добавляем класс\n      });\n      setData([...data, response.data]);\n    } catch (error) {\n      console.error(\"Error adding data with class:\", error);\n    }\n  };\n\n  // Функция удаления строки\n  const handleDelete = async id => {\n    try {\n      await axios.delete(`http://localhost:5000/api/data/${id}`);\n      setData(data.filter(item => item._id !== id));\n    } catch (error) {\n      console.error(\"Error deleting data:\", error);\n    }\n  };\n\n  // Функция удаления строки с подтверждением\n  const handleDeleteWithConfirmation = id => {\n    // Показываем предупреждение перед удалением\n    const isConfirmed = window.confirm(\"Are you sure you want to delete this item?\");\n    if (isConfirmed) {\n      // Если пользователь подтвердил, выполняем удаление\n      handleDelete(id);\n    }\n  };\n  const handleInputChange = (e, itemId, fieldName) => {\n    const {\n      value,\n      type,\n      checked\n    } = e.target;\n    const updatedValue = type === \"checkbox\" ? checked : value;\n    setData(data.map(item => item._id === itemId ? {\n      ...item,\n      [fieldName]: updatedValue\n    } : item));\n    axios.put(`http://localhost:5000/api/data/${itemId}`, {\n      ...data.find(item => item._id === itemId),\n      [fieldName]: updatedValue\n    }).catch(error => console.error(\"Error saving data:\", error));\n  };\n  const handleDateChange = (e, itemId) => {\n    const {\n      value\n    } = e.target;\n    setData(data.map(item => item._id === itemId ? {\n      ...item,\n      date: value\n    } : item));\n    axios.put(`http://localhost:5000/api/data/${itemId}`, {\n      ...data.find(item => item._id === itemId),\n      date: value\n    }).catch(error => console.error(\"Error updating date:\", error));\n  };\n  const handleAddNewDriver = async () => {\n    if (newDriver.trim() === \"\") return;\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/drivers\", {\n        name: newDriver\n      });\n      setDrivers([...drivers, response.data]);\n      setNewDriver(\"\");\n    } catch (error) {\n      console.error(\"Error adding driver:\", error);\n    }\n  };\n\n  // Функция для группировки данных по месяцам и дням\n  const groupByMonthAndDay = data => {\n    return data.reduce((groups, item) => {\n      const date = new Date(item.date);\n      const monthYear = date.toLocaleString(\"default\", {\n        month: \"long\"\n      });\n      const day = date.getDate();\n      if (!groups[monthYear]) {\n        groups[monthYear] = {};\n      }\n      if (!groups[monthYear][day]) {\n        groups[monthYear][day] = [];\n      }\n      groups[monthYear][day].push(item);\n      return groups;\n    }, {});\n  };\n\n  // Определяем текущий день для прокрутки\n  const isToday = (day, month, year) => {\n    const today = new Date();\n    return today.getDate() === day && today.getMonth() === month && today.getFullYear() === year;\n  };\n\n  // Функция для получения названия месяца\n  const getMonthName = date => {\n    const options = {\n      month: 'long'\n    };\n    return new Intl.DateTimeFormat('ru-RU', options).format(date);\n  };\n\n  // Функция для замены мягкого знака\n  const replaceSoftSign = month => {\n    return month.replace(/ь/g, 'я'); // Заменяем мягкий знак на 'я'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Data Table\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addEntriesForSelectedDate,\n          children: \"Add 37 Entries for Selected Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewItem,\n          children: \"Add New Item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addNewItemWithClass(\"highlight\"),\n          children: \"Add New Item with Highlight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: selectedDate,\n        onChange: e => setSelectedDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-table\",\n      children: Object.keys(groupByMonthAndDay(sortedData)).map(monthYear => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: replaceSoftSign(monthYear)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), Object.keys(groupByMonthAndDay(sortedData)[monthYear]).map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: isToday(Number(day), new Date().getMonth(), new Date().getFullYear()) ? currentDayRef : null,\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: isToday(Number(day), new Date(items[0].date).getMonth(), new Date(items[0].date).getFullYear()) ? 'today-class' : '',\n            children: [day, \" \", replaceSoftSign(monthYear)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this)\n        }, day, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 15\n        }, this))]\n      }, monthYear, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"mowTSn0MyazWRHkrdvsTMokNMtQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","hardcodedData","useNavigate","jsxDEV","_jsxDEV","Home","_s","data","setData","drivers","setDrivers","newDriver","setNewDriver","newItem","setNewItem","date","Date","toISOString","split","brand","driver","customer","routeNumber","hours","isTrue","vehicleNumber","price","colorClass","selectedDate","setSelectedDate","navigate","currentDayRef","fetchData","response","get","error","console","fetchDrivers","current","scrollIntoView","behavior","block","handleLogout","localStorage","removeItem","sortedData","sort","a","b","localeCompare","addEntriesForSelectedDate","newEntries","map","item","Promise","all","entry","post","addNewItem","addNewItemWithClass","className","handleDelete","id","delete","filter","_id","handleDeleteWithConfirmation","isConfirmed","window","confirm","handleInputChange","e","itemId","fieldName","value","type","checked","target","updatedValue","put","find","catch","handleDateChange","handleAddNewDriver","trim","name","groupByMonthAndDay","reduce","groups","monthYear","toLocaleString","month","day","getDate","push","isToday","year","today","getMonth","getFullYear","getMonthName","options","Intl","DateTimeFormat","format","replaceSoftSign","replace","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","Object","keys","ref","Number","items","_c","$RefreshReg$"],"sources":["D:/project/BamApp/src/home.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { hardcodedData } from \"./hardcodedData\";\r\nimport \"./styles.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  const [data, setData] = useState([]);\r\n  const [drivers, setDrivers] = useState([]);\r\n  const [newDriver, setNewDriver] = useState(\"\");\r\n  const [newItem, setNewItem] = useState({\r\n    date: new Date().toISOString().split(\"T\")[0],\r\n    brand: \"\",\r\n    driver: \"\",\r\n    customer: \"\",\r\n    routeNumber: \"\",\r\n    hours: \"\",\r\n    isTrue: false,\r\n    vehicleNumber: \"\",\r\n    price: \"\",\r\n    colorClass: \"\", // Добавлен colorClass\r\n  });\r\n  const [selectedDate, setSelectedDate] = useState(\r\n    new Date().toISOString().split(\"T\")[0]\r\n  );\r\n\r\n  const navigate = useNavigate();\r\n  const currentDayRef = useRef(null);\r\n\r\n  // Получение данных с сервера\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/data\");\r\n        setData(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchDrivers = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/drivers\");\r\n        setDrivers(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching drivers:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    fetchDrivers();\r\n  }, []);\r\n\r\n  // Прокрутка к текущему дню после загрузки данных\r\n  useEffect(() => {\r\n    if (currentDayRef.current) {\r\n      currentDayRef.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n    }\r\n  }, [data]);\r\n\r\n  // Функция выхода из системы\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  // Сортировка данных по водителям и перемещение строк с классом 'highlight' в конец\r\n  const sortedData = data\r\n    .sort((a, b) => {\r\n      if (a.colorClass === 'highlight' && b.colorClass !== 'highlight') return 1;\r\n      if (a.colorClass !== 'highlight' && b.colorClass === 'highlight') return -1;\r\n      return a.driver.localeCompare(b.driver);\r\n    })\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n  // Функция для добавления строк на каждый новый день\r\n  const addEntriesForSelectedDate = async () => {\r\n    try {\r\n      const newEntries = hardcodedData.map((item) => ({\r\n        ...item,\r\n        date: selectedDate,\r\n      }));\r\n\r\n      await Promise.all(\r\n        newEntries.map((entry) =>\r\n          axios.post(\"http://localhost:5000/api/data\", entry)\r\n        )\r\n      );\r\n\r\n      const response = await axios.get(\"http://localhost:5000/api/data\");\r\n      setData(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error adding entries:\", error);\r\n    }\r\n  };\r\n\r\n  // Добавление одной строки данных\r\n  const addNewItem = async () => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:5000/api/data\",\r\n        newItem\r\n      );\r\n      setData([...data, response.data]);\r\n    } catch (error) {\r\n      console.error(\"Error adding data:\", error);\r\n    }\r\n  };\r\n\r\n  // Добавление строки с определенным классом\r\n  const addNewItemWithClass = async (className) => {\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/data\", {\r\n        ...newItem,\r\n        colorClass: className, // Добавляем класс\r\n      });\r\n      setData([...data, response.data]);\r\n    } catch (error) {\r\n      console.error(\"Error adding data with class:\", error);\r\n    }\r\n  };\r\n\r\n  // Функция удаления строки\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:5000/api/data/${id}`);\r\n      setData(data.filter(item => item._id !== id));\r\n    } catch (error) {\r\n      console.error(\"Error deleting data:\", error);\r\n    }\r\n  };\r\n\r\n  // Функция удаления строки с подтверждением\r\n  const handleDeleteWithConfirmation = (id) => {\r\n    // Показываем предупреждение перед удалением\r\n    const isConfirmed = window.confirm(\"Are you sure you want to delete this item?\");\r\n    \r\n    if (isConfirmed) {\r\n      // Если пользователь подтвердил, выполняем удаление\r\n      handleDelete(id);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e, itemId, fieldName) => {\r\n    const { value, type, checked } = e.target;\r\n    const updatedValue = type === \"checkbox\" ? checked : value;\r\n\r\n    setData(\r\n      data.map((item) =>\r\n        item._id === itemId ? { ...item, [fieldName]: updatedValue } : item\r\n      )\r\n    );\r\n\r\n    axios\r\n      .put(`http://localhost:5000/api/data/${itemId}`, {\r\n        ...data.find((item) => item._id === itemId),\r\n        [fieldName]: updatedValue,\r\n      })\r\n      .catch((error) => console.error(\"Error saving data:\", error));\r\n  };\r\n\r\n  const handleDateChange = (e, itemId) => {\r\n    const { value } = e.target;\r\n\r\n    setData(\r\n      data.map((item) =>\r\n        item._id === itemId ? { ...item, date: value } : item\r\n      )\r\n    );\r\n\r\n    axios\r\n      .put(`http://localhost:5000/api/data/${itemId}`, {\r\n        ...data.find((item) => item._id === itemId),\r\n        date: value,\r\n      })\r\n      .catch((error) => console.error(\"Error updating date:\", error));\r\n  };\r\n\r\n  const handleAddNewDriver = async () => {\r\n    if (newDriver.trim() === \"\") return;\r\n\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/drivers\", {\r\n        name: newDriver,\r\n      });\r\n      setDrivers([...drivers, response.data]);\r\n      setNewDriver(\"\");\r\n    } catch (error) {\r\n      console.error(\"Error adding driver:\", error);\r\n    }\r\n  };\r\n\r\n  // Функция для группировки данных по месяцам и дням\r\n  const groupByMonthAndDay = (data) => {\r\n    return data.reduce((groups, item) => {\r\n      const date = new Date(item.date);\r\n      const monthYear = date.toLocaleString(\"default\", { month: \"long\" });\r\n      const day = date.getDate();\r\n\r\n      if (!groups[monthYear]) {\r\n        groups[monthYear] = {};\r\n      }\r\n\r\n      if (!groups[monthYear][day]) {\r\n        groups[monthYear][day] = [];\r\n      }\r\n\r\n      groups[monthYear][day].push(item);\r\n      return groups;\r\n    }, {});\r\n  };\r\n\r\n  // Определяем текущий день для прокрутки\r\n  const isToday = (day, month, year) => {\r\n    const today = new Date();\r\n    return (\r\n      today.getDate() === day &&\r\n      today.getMonth() === month &&\r\n      today.getFullYear() === year\r\n    );\r\n  };\r\n\r\n  // Функция для получения названия месяца\r\n  const getMonthName = (date) => {\r\n    const options = { month: 'long' };\r\n    return new Intl.DateTimeFormat('ru-RU', options).format(date);\r\n  };\r\n\r\n  // Функция для замены мягкого знака\r\n  const replaceSoftSign = (month) => {\r\n    return month.replace(/ь/g, 'я'); // Заменяем мягкий знак на 'я'\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <h1>Data Table</h1>\r\n        <div className=\"buttons\">\r\n          <button onClick={addEntriesForSelectedDate}>\r\n            Add 37 Entries for Selected Date\r\n          </button>\r\n          <button onClick={addNewItem}>Add New Item</button>\r\n          <button onClick={() => addNewItemWithClass(\"highlight\")}>\r\n            Add New Item with Highlight\r\n          </button>\r\n          <button onClick={handleLogout}>Logout</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"controls\">\r\n        <input\r\n          type=\"date\"\r\n          value={selectedDate}\r\n          onChange={(e) => setSelectedDate(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"data-table\">\r\n        {Object.keys(groupByMonthAndDay(sortedData)).map((monthYear) => (\r\n          <div key={monthYear}>\r\n            <h2>{replaceSoftSign(monthYear)}</h2>\r\n            {Object.keys(groupByMonthAndDay(sortedData)[monthYear]).map((day) => (\r\n              <div key={day} ref={isToday(Number(day), new Date().getMonth(), new Date().getFullYear()) ? currentDayRef : null}>\r\n                <h3 className={isToday(Number(day), new Date(items[0].date).getMonth(), new Date(items[0].date).getFullYear()) ? 'today-class' : ''}>\r\n                  {day} {replaceSoftSign(monthYear)}\r\n                </h3>\r\n                {/* Ваш код для отображения строк данных */}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}