{"ast":null,"code":"import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Use constructFrom here instead?\n  if (context) return context(argument);\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (typeof argument === \"object\" && constructFromSymbol in argument) {\n    return argument[constructFromSymbol](argument);\n  } else if (argument instanceof Date || typeof argument === \"object\" && argStr === \"[object Date]\") {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (typeof argument === \"number\" || argStr === \"[object Number]\" || typeof argument === \"string\" || argStr === \"[object String]\") {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;","map":{"version":3,"names":["constructFromSymbol","toDate","argument","context","argStr","Object","prototype","toString","call","Date","constructor","NaN"],"sources":["D:/project/BamApp/node_modules/date-fns/toDate.js"],"sourcesContent":["import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Use constructFrom here instead?\n  if (context) return context(argument);\n\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (typeof argument === \"object\" && constructFromSymbol in argument) {\n    return argument[constructFromSymbol](argument);\n  } else if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,gBAAgB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACxC;EACA,IAAIA,OAAO,EAAE,OAAOA,OAAO,CAACD,QAAQ,CAAC;EAErC,MAAME,MAAM,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACN,QAAQ,CAAC;;EAEvD;EACA,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIF,mBAAmB,IAAIE,QAAQ,EAAE;IACnE,OAAOA,QAAQ,CAACF,mBAAmB,CAAC,CAACE,QAAQ,CAAC;EAChD,CAAC,MAAM,IACLA,QAAQ,YAAYO,IAAI,IACvB,OAAOP,QAAQ,KAAK,QAAQ,IAAIE,MAAM,KAAK,eAAgB,EAC5D;IACA;IACA,OAAO,IAAIF,QAAQ,CAACQ,WAAW,CAAC,CAACR,QAAQ,CAAC;EAC5C,CAAC,MAAM,IACL,OAAOA,QAAQ,KAAK,QAAQ,IAC5BE,MAAM,KAAK,iBAAiB,IAC5B,OAAOF,QAAQ,KAAK,QAAQ,IAC5BE,MAAM,KAAK,iBAAiB,EAC5B;IACA;IACA,OAAO,IAAIK,IAAI,CAACP,QAAQ,CAAC;EAC3B,CAAC,MAAM;IACL;IACA,OAAO,IAAIO,IAAI,CAACE,GAAG,CAAC;EACtB;AACF;;AAEA;AACA,eAAeV,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}