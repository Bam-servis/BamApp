{"ast":null,"code":"const express = require(\"express\");\nconst bcrypt = require(\"bcrypt\");\nconst jwt = require(\"jsonwebtoken\");\nconst User = require(\"../models/User\");\nconst router = express.Router();\n\n// Логин пользователя\nrouter.post(\"/login\", async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  if (!username || !password) {\n    return res.status(400).json({\n      message: \"Please provide username and password\"\n    });\n  }\n  try {\n    // Проверка, существует ли пользователь\n    const user = await User.findOne({\n      username\n    });\n    if (!user) {\n      return res.status(400).json({\n        message: \"Invalid credentials\"\n      });\n    }\n\n    // Сравнение пароля\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        message: \"Invalid credentials\"\n      });\n    }\n\n    // Создание JWT токена\n    const token = jwt.sign({\n      id: user._id\n    }, \"your_jwt_secret\", {\n      expiresIn: \"1h\"\n    });\n    res.json({\n      token,\n      user: {\n        id: user._id,\n        username: user.username\n      }\n    });\n  } catch (error) {\n    console.error(\"Error logging in:\", error);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","jwt","User","router","Router","post","req","res","username","password","body","status","json","message","user","findOne","isMatch","compare","token","sign","id","_id","expiresIn","error","console","module","exports"],"sources":["C:/Users/USER/Downloads/BamSheet/my-spreadsheet-app/bamapp/src/components/Login.js"],"sourcesContent":["const express = require(\"express\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst User = require(\"../models/User\");\r\n\r\nconst router = express.Router();\r\n\r\n// Логин пользователя\r\nrouter.post(\"/login\", async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  if (!username || !password) {\r\n    return res\r\n      .status(400)\r\n      .json({ message: \"Please provide username and password\" });\r\n  }\r\n\r\n  try {\r\n    // Проверка, существует ли пользователь\r\n    const user = await User.findOne({ username });\r\n    if (!user) {\r\n      return res.status(400).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    // Сравнение пароля\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    // Создание JWT токена\r\n    const token = jwt.sign({ id: user._id }, \"your_jwt_secret\", {\r\n      expiresIn: \"1h\",\r\n    });\r\n\r\n    res.json({ token, user: { id: user._id, username: user.username } });\r\n  } catch (error) {\r\n    console.error(\"Error logging in:\", error);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMG,IAAI,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAEtC,MAAMI,MAAM,GAAGL,OAAO,CAACM,MAAM,CAAC,CAAC;;AAE/B;AACAD,MAAM,CAACE,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAEvC,IAAI,CAACF,QAAQ,IAAI,CAACC,QAAQ,EAAE;IAC1B,OAAOF,GAAG,CACPI,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAuC,CAAC,CAAC;EAC9D;EAEA,IAAI;IACF;IACA,MAAMC,IAAI,GAAG,MAAMZ,IAAI,CAACa,OAAO,CAAC;MAAEP;IAAS,CAAC,CAAC;IAC7C,IAAI,CAACM,IAAI,EAAE;MACT,OAAOP,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACjE;;IAEA;IACA,MAAMG,OAAO,GAAG,MAAMhB,MAAM,CAACiB,OAAO,CAACR,QAAQ,EAAEK,IAAI,CAACL,QAAQ,CAAC;IAC7D,IAAI,CAACO,OAAO,EAAE;MACZ,OAAOT,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACjE;;IAEA;IACA,MAAMK,KAAK,GAAGjB,GAAG,CAACkB,IAAI,CAAC;MAAEC,EAAE,EAAEN,IAAI,CAACO;IAAI,CAAC,EAAE,iBAAiB,EAAE;MAC1DC,SAAS,EAAE;IACb,CAAC,CAAC;IAEFf,GAAG,CAACK,IAAI,CAAC;MAAEM,KAAK;MAAEJ,IAAI,EAAE;QAAEM,EAAE,EAAEN,IAAI,CAACO,GAAG;QAAEb,QAAQ,EAAEM,IAAI,CAACN;MAAS;IAAE,CAAC,CAAC;EACtE,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzChB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAe,CAAC,CAAC;EACnD;AACF,CAAC,CAAC;AAEFY,MAAM,CAACC,OAAO,GAAGvB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}